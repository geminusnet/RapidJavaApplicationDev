package jdbcdemo;

import javax.swing.table.*;
import java.util.*;
import java.sql.*;

public class DBInfoPanel extends javax.swing.JPanel {
  // Table models for the five tables
  DefaultTableModel model1 = new DefaultTableModel();
  DefaultTableModel model2 = new DefaultTableModel();
  DefaultTableModel model3 = new DefaultTableModel();
  DefaultTableModel model4 = new DefaultTableModel();
  DefaultTableModel model5 = new DefaultTableModel();
  
  private java.sql.Connection connection;
  DatabaseMetaData dbMetaData;

  /** Creates new form DBInfoPanel */
  public DBInfoPanel() {
    initComponents();
    
    jTable1.setModel(model1);
    jTable2.setModel(model2);
    jTable3.setModel(model3);
    jTable4.setModel(model4);
    jTable5.setModel(model5);
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        
        setLayout(new java.awt.BorderLayout());
        
        jScrollPane1.setViewportView(jTable1);
        
        jTabbedPane1.addTab("General", jScrollPane1);
      
      jScrollPane2.setViewportView(jTable2);
        
        jTabbedPane1.addTab("Capabilities", jScrollPane2);
      
      jScrollPane3.setViewportView(jTable3);
        
        jTabbedPane1.addTab("Functions", jScrollPane3);
      
      jScrollPane4.setViewportView(jTable4);
        
        jTabbedPane1.addTab("Data Types", jScrollPane4);
      
      jScrollPane5.setViewportView(jTable5);
        
        jTabbedPane1.addTab("Table Types", jScrollPane5);
      
      add(jTabbedPane1, java.awt.BorderLayout.CENTER);
    
  }//GEN-END:initComponents
    
    public void setConnection(java.sql.Connection newConnection) {
      connection = newConnection;
      
      try {
        showMetaData();
      }
      catch (SQLException ex) {
        ex.printStackTrace();
      }
    }
    
    /** Show database meta data */
    private void showMetaData() throws SQLException {
      dbMetaData = connection.getMetaData();
      showGeneralInfo();
      showCapability();
      showFunctions();
      showDataTypes();
      showTableTypes();
    }
    
    /** Find general database information */
    private void  showGeneralInfo() throws SQLException {
      Object[][] data = new Object[][] {
        {"database URL", dbMetaData.getURL()},
        {"database username", dbMetaData.getUserName()},
        {"database product name", dbMetaData.getDatabaseProductName()},
        {"database product version", dbMetaData.getDatabaseProductVersion()},
        {"JDBC driver name", dbMetaData.getDriverName()},
        {"JDBC driver version", dbMetaData.getDriverVersion()},
        {"JDBC driver major version",
         new Integer( dbMetaData.getDriverMajorVersion()) },
         {"JDBC driver minor version",
          new Integer(dbMetaData.getDriverMinorVersion())},
          {"Max number of connections",
           new Integer(dbMetaData.getMaxConnections())},
           {"MaxTableNameLength",
            new Integer(dbMetaData.getMaxTableNameLength())},
            {"MaxColumnsInTable",
             new Integer(dbMetaData.getMaxColumnsInTable())},
             {"MaxStatements",
              new Integer(dbMetaData.getMaxStatements())},
              {"MaxColumnsInSelect",
               new Integer(dbMetaData.getMaxColumnsInSelect())},
               {"getSchemaTerm", dbMetaData.getSchemaTerm()},
               {"getProcedureTerm", dbMetaData.getProcedureTerm()},
               {"getCatalogTerm", dbMetaData.getCatalogTerm()}};
               
               Object[] columnNames = new Object[]{"Feature", "Information"};
               
               // Set new data to the table model
               model1.setDataVector(data, columnNames);
    }
    
    /** Find database capability */
    private void showCapability() throws SQLException {
      Object[][] data2 = new Object[][] {
        {"Use Local Files?",
         new Boolean(dbMetaData.usesLocalFiles())},
         {"Use Local File per Table?",
          new Boolean(dbMetaData.usesLocalFilePerTable())},
          {"supportsMixedCaseIdentifiers?",
           new Boolean(dbMetaData.supportsMixedCaseIdentifiers())},
           {"storesUpperCaseIdentifiers?",
            new Boolean(dbMetaData.storesUpperCaseIdentifiers())},
            {"storesMixedCaseIdentifiers?",
             new Boolean(dbMetaData.storesMixedCaseIdentifiers())},
             {"supportsGroupBy?",
              new Boolean(dbMetaData.supportsGroupBy())},
              {"supportsANSI92EntryLevelSQL?",
               new Boolean(dbMetaData.supportsANSI92EntryLevelSQL())},
               {"supportsOuterJoins?",
                new Boolean(dbMetaData.supportsOuterJoins())},
                {"supportsAlterTableWithAddColumn?",
                 new Boolean(dbMetaData.supportsAlterTableWithAddColumn())},
                 {"supportsAlterTableWithDropColumn?",
                  new Boolean(dbMetaData.supportsAlterTableWithDropColumn())},
                  {"isCatalogAtStart?",
                   new Boolean(dbMetaData.isCatalogAtStart())},
                   {"supportsSelectForUpdate?",
                    new Boolean(dbMetaData.supportsSelectForUpdate())},
                    {"supportsStoredProcedures?",
                     new Boolean(dbMetaData.supportsStoredProcedures())},
                     {"supportsUnion?",
                      new Boolean(dbMetaData.supportsUnion())},
                      {"supportsTransactions?",
                       new Boolean(dbMetaData.supportsTransactions())},
                       {"supportsDataDefinitionAndDataManipulationTransactions? ",
                        new Boolean(dbMetaData.
                        supportsDataDefinitionAndDataManipulationTransactions())}};
                        
                        Object[] columnNames2 = new Object[]{"Feature", "Capability"};
                        model2.setDataVector(data2, columnNames2);
    }
    
    /** Find functions available in the database */
    private void showFunctions() throws SQLException {
      model3.setColumnCount(1); // Set column count
      jTable3.removeAll(); // Clear the table
      
      model3.setColumnIdentifiers(new Object[]{" "}); // No column name
      model3.addRow(new Object[]{"---- Numeric Functions ----"});
      addFunctions(dbMetaData.getNumericFunctions());
      model3.addRow(new Object[]{" "});
      model3.addRow(new Object[]{"---- String Functions ----"});
      addFunctions(dbMetaData.getStringFunctions());
      model3.addRow(new Object[]{" "});
      model3.addRow(new Object[]{"---- System Functions ----"});
      addFunctions(dbMetaData.getSystemFunctions());
      model3.addRow(new Object[]{" "});
      model3.addRow(new Object[]{"---- Date and Time Functions ----"});
      addFunctions(dbMetaData.getTimeDateFunctions());
    }
    
    private void addFunctions(String s) {
      StringTokenizer st = new StringTokenizer(s, ",");
      
      while (st.hasMoreTokens())
        model3.addRow(new Object[]{st.nextToken()});
    }
    
    /** Show available data types */
    private void showDataTypes() throws SQLException {
      model4.setColumnCount(1); // Set column count
      model4.setColumnIdentifiers(new Object[]{" "}); // No column name
      
      jTable4.removeAll(); // Clear the table
      
      ResultSet rs = dbMetaData.getTypeInfo();
      while (rs.next())
        model4.addRow(new Object[]{rs.getString("TYPE_NAME")});
    }
    
    /** Show available table types */
    private void showTableTypes() throws SQLException {
      model5.setColumnCount(1); // Set column count
      model5.setColumnIdentifiers(new Object[]{" "}); // No column name
      
      jTable5.removeAll(); // Clear the table
      
      ResultSet rs = dbMetaData.getTableTypes();
      while (rs.next())
        model5.addRow(new Object[]{rs.getString("TABLE_TYPE")});
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable5;
    // End of variables declaration//GEN-END:variables
}