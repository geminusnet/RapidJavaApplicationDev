package customlayoutdemo;

import java.awt.Container;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.Comparator;
import com.borland.jbuilder.designer.ui.DesignView;
import com.borland.jbuilder.designer.ui.ModelNode;
import com.borland.jbuilder.designer.ui.UIDesigner;
import com.borland.jbuilder.designer.ui.BasicLayoutAssistant;
import com.borland.jbuilder.designer.ui.opt.SelectBoxes;

/**
 * <p>This class will make the RowLayout layout manager available to the
 * Designer.  It will add an item to the drop down menu of available layout
 * managers to the Inspector when a container is being designed.</p>
 *
 * <p>For illustration purposes, this class also defines custom behaviour
 * for component outlines when they are being moved within a container that
 * uses the RowLayout layout manager.  Instead of component outlines bouncing
 * from grid to grid as is the default, this class specifies that the component
 * outlines will follow the mouse.</p>
 */

 public class DiagonalLayoutAssistant extends BasicLayoutAssistant
{

  /**
   * <p>Initializes and registers this OpenTool
   */
  public static void initOpenTool(byte majorVersion, byte minorVersion)
  {
    UIDesigner.registerAssistant(
      DiagonalLayoutAssistant.class,
      "customlayoutdemo.DiagonalLayout", //NORES
      true);
  }

  public String prepareMoveStatus(ModelNode node, ModelNode toNode,
                                  Point location, SelectBoxes s,
                                  Point mouseOffset) {
    // target container (parent container) information
    Container container   = toNode.getSubcomponent().getAsContainer();
    Insets    insets      = container.getInsets();
    Point     absLocation = DesignView.componentAbsLocation(container);
    Rectangle zBounds     =  container.getBounds();

    // represent the size of the container
    zBounds.x      =  insets.left;
    zBounds.y      =  insets.top;
    zBounds.width  -= insets.left + insets.right;
    zBounds.height -= insets.top + insets.bottom;

    // get the new position of the component being moved within the container
    String status = toNode
                       + " z: " //NORES
                       + calcBestZ(node, toNode, location, null, zBounds);
    // specify that the x position of the component outline will be in relation
    // to the current location of the mouse.  This is different from the
    // behaviour of the default gridlayout component outline, which bounces
    // from one grid to another.  This is just one of the ways we can
    // customise our layout manager assistant.
    absLocation.x += location.x;
    absLocation.y += zBounds.y;

    // absLocation now equals the new position of the component outline,
    // adjusted for insets.
    // zBounds represents the bounds of the component being moved.  Show the
    // component outline in the new position.
    Dimension size = new Dimension(zBounds.width, zBounds.height);
    s.show(0, absLocation, size, 2);
    return status;
  }
}