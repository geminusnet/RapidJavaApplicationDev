package eventdemo;

import java.awt.*;
import javax.swing.JPanel;
import java.io.*;
import java.awt.event.*;
import java.util.*;

/**
 * Title:        Event Demo
 * Description:
 * Copyright:    Copyright (c) 2000
 * Company:      Armstrong Atlantic State University
 * @author Y. Daniel Liang
 * @version 1.0
 */

public class Timer implements Serializable, Runnable
{
  private int delay = 1000;
  private transient Vector actionListeners;

  /**A thread to control tick*/
  protected Thread thread = null;

  /**Whether the thread is suspended*/
  private boolean suspended;

  public Timer()
  {
    // Create and start the thread
    thread = new Thread(this);
    thread.start();
  }

  public Timer(int delay, ActionListener l)
  {
    this();
    this.delay = delay;
    addActionListener(l);
  }

  public int getDelay()
  {
    return delay;
  }

  public void setDelay(int newDelay)
  {
    delay = newDelay;
  }

  public synchronized void removeActionListener(ActionListener l)
  {
    if (actionListeners != null && actionListeners.contains(l))
    {
      Vector v = (Vector) actionListeners.clone();
      v.removeElement(l);
      actionListeners = v;
    }
  }

  public synchronized void addActionListener(ActionListener l)
  {
    Vector v = actionListeners == null ? new Vector(2) : (Vector) actionListeners.clone();
    if (!v.contains(l))
    {
      v.addElement(l);
      actionListeners = v;
    }
  }

  protected void fireActionPerformed(ActionEvent e)
  {
    if (actionListeners != null)
    {
      Vector listeners = actionListeners;
      int count = listeners.size();
      for (int i = 0; i < count; i++)
      {
        ((ActionListener) listeners.elementAt(i)).actionPerformed(e);
      }
    }
  }

  /**Run the thread*/
  public void run()
  {
    while (true)
    {
      try
      {
        Thread.sleep(delay);
        synchronized (this)
        {
          while (suspended)
            wait();
        }
      }
      catch (InterruptedException e)
      {  }

      // Fire TickEvent
      fireActionPerformed(new ActionEvent(this,
        ActionEvent.ACTION_PERFORMED, null));
    }
  }

  /**Resume the thread*/
  public synchronized void start()
  {
    if (suspended)
    {
      suspended = false;
      notify();
    }
  }

  /**Suspend the thread*/
  public synchronized void stop()
  {
    suspended = true;
  }
}