/*
 * BeanInsight.java
 *
 * Created on August 26, 2001, 11:17 PM
 */

package beaninfodemo;

import java.beans.*;
/**
 *
 * @author  administrator
 */
public class BeanInsight extends javax.swing.JFrame {
  
  // Declare introspection type
  private String introspectionType = "Properties";
  
  /** Creates new form BeanInsight */
  public BeanInsight() {
    initComponents();
    
    jcboTypes.addItem("Properties");
    jcboTypes.addItem("Events");
    jcboTypes.addItem("Methods");
    
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
        jpInspect = new javax.swing.JPanel();
        jpLabels = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jpSelections = new javax.swing.JPanel();
        jcboTypes = new javax.swing.JComboBox();
        jtfClass = new javax.swing.JTextField();
        jbtInspect = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jta = new javax.swing.JTextArea();
        
        setTitle("BeanInsight");
        addWindowListener(new java.awt.event.WindowAdapter() {
          public void windowClosing(java.awt.event.WindowEvent evt) {
            exitForm(evt);
          }
        });
        
        jpInspect.setLayout(new java.awt.BorderLayout());
        
        jpLabels.setLayout(new java.awt.GridLayout(2, 0));
        
        jLabel2.setText("Inspection Type");
        jpLabels.add(jLabel2);
        
        jLabel3.setText("Inspection Class");
        jpLabels.add(jLabel3);
        
        jpInspect.add(jpLabels, java.awt.BorderLayout.WEST);
      
      jpSelections.setLayout(new java.awt.GridLayout(2, 0));
        
        jcboTypes.addActionListener(new java.awt.event.ActionListener() {
          public void actionPerformed(java.awt.event.ActionEvent evt) {
            jcboTypesActionPerformed(evt);
          }
        });
        
        jpSelections.add(jcboTypes);
        
        jpSelections.add(jtfClass);
        
        jpInspect.add(jpSelections, java.awt.BorderLayout.CENTER);
      
      jbtInspect.setText("Inspect");
      jbtInspect.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
          jbtInspectActionPerformed(evt);
        }
      });
      
      jpInspect.add(jbtInspect, java.awt.BorderLayout.EAST);
      
      getContentPane().add(jpInspect, java.awt.BorderLayout.NORTH);
      
      jScrollPane1.setViewportView(jta);
      
      getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);
    
    pack();
  }//GEN-END:initComponents
  
  private void jbtInspectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtInspectActionPerformed
    try {
      introspectBean(Class.forName(jtfClass.getText()));
    }
    catch (ClassNotFoundException ex) {
      System.out.println("class not found");
    }
  }//GEN-LAST:event_jbtInspectActionPerformed
  
  /** Invoked from the button action to introspect a bean */
  public void introspectBean(Class beanClass) {
    try {
      BeanInfo bi = Introspector.getBeanInfo(beanClass);
      if (introspectionType.equals("Properties")) {
        PropertyDescriptor[] pd = bi.getPropertyDescriptors();
        jta.setText(null);
        for (int i=0; i<pd.length; i++)
          jta.append(pd[i].getName() + "\n");
      }
      else if (introspectionType.equals("Events")) {
        EventSetDescriptor[] ed = bi.getEventSetDescriptors();
        jta.setText(null);
        for (int i=0; i<ed.length; i++)
          jta.append(ed[i].getName() + "\n");
      }
      else if (introspectionType.equals("Methods")) {
        MethodDescriptor[] md = bi.getMethodDescriptors();
        jta.setText(null);
        for (int i=0; i<md.length; i++)
          jta.append(md[i].getName() + "\n");
      }
    }
    catch (IntrospectionException ex) {
      System.out.println("Error during introspection");
    }
  }
  
  private void jcboTypesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcboTypesActionPerformed
    introspectionType = (String)jcboTypes.getSelectedItem();
  }//GEN-LAST:event_jcboTypesActionPerformed
  
  /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
      System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
      new BeanInsight().show();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jpInspect;
    private javax.swing.JPanel jpLabels;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jpSelections;
    private javax.swing.JComboBox jcboTypes;
    private javax.swing.JTextField jtfClass;
    private javax.swing.JButton jbtInspect;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jta;
    // End of variables declaration//GEN-END:variables
    
}