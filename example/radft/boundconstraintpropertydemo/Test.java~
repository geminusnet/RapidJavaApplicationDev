/*
 * Test.java
 *
 * Created on October 4, 2001, 9:37 PM
 */

package boundconstraintpropertydemo;

/**
 *
 * @author  administrator
 */
public class Test extends javax.swing.JPanel {
  
  /** Holds value of property radius. */
  private double radius;
  
  /** Utility field used by constrained properties. */
  private java.beans.VetoableChangeSupport vetoableChangeSupport =  new java.beans.VetoableChangeSupport(this);
  
  /** Holds value of property length. */
  private iny length;
  
  /** Utility field used by bound properties. */
  private java.beans.PropertyChangeSupport propertyChangeSupport =  new java.beans.PropertyChangeSupport(this);
  
  /** Holds value of property timeZoneOffset. */
  private int timeZoneOffset;
  
  /** Holds value of property usingTimeZoneID. */
  private boolean usingTimeZoneID;
  
  /** Creates new form Test */
  public Test() {
    initComponents();
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    private void initComponents() {//GEN-BEGIN:initComponents
        setLayout(new java.awt.BorderLayout());

    }//GEN-END:initComponents
    
    /** Add a VetoableChangeListener to the listener list.
     * @param l The listener to add.
     */
    public void addVetoableChangeListener(java.beans.VetoableChangeListener l) {
      vetoableChangeSupport.addVetoableChangeListener(l);
    }
    
    /** Removes a VetoableChangeListener from the listener list.
     * @param l The listener to remove.
     */
    public void removeVetoableChangeListener(java.beans.VetoableChangeListener l) {
      vetoableChangeSupport.removeVetoableChangeListener(l);
    }
    
    /** Getter for property radius.
     * @return Value of property radius.
     */
    public double getRadius() {
      return radius;
    }
    
    /** Setter for property radius.
     * @param radius New value of property radius.
     *
     * @throws PropertyVetoException
     */
    public void setRadius(double radius) throws java.beans.PropertyVetoException {
      double oldRadius = this.radius;
      vetoableChangeSupport.fireVetoableChange("radius", new Double(oldRadius), new Double(radius));
      this.radius = radius;
    }
    
    /** Add a PropertyChangeListener to the listener list.
     * @param l The listener to add.
     */
    public void addPropertyChangeListener(java.beans.PropertyChangeListener l) {
      propertyChangeSupport.addPropertyChangeListener(l);
    }
    
    /** Removes a PropertyChangeListener from the listener list.
     * @param l The listener to remove.
     */
    public void removePropertyChangeListener(java.beans.PropertyChangeListener l) {
      propertyChangeSupport.removePropertyChangeListener(l);
    }
    
    /** Getter for property length.
     * @return Value of property length.
     */
    public iny getLength() {
      return length;
    }
    
    /** Setter for property length.
     * @param length New value of property length.
     *
     * @throws PropertyVetoException
     */
    public void setLength(iny length) throws java.beans.PropertyVetoException {
      iny oldLength = this.length;
      vetoableChangeSupport.fireVetoableChange("length", oldLength, length);
      this.length = length;
      propertyChangeSupport.firePropertyChange("length", oldLength, length);
    }
    
    /** Getter for property timeZoneOffset.
     * @return Value of property timeZoneOffset.
     */
    public int getTimeZoneOffset() {
      return timeZoneOffset;
    }
    
    /** Setter for property timeZoneOffset.
     * @param timeZoneOffset New value of property timeZoneOffset.
     *
     * @throws PropertyVetoException
     */
    public void setTimeZoneOffset(int timeZoneOffset) throws java.beans.PropertyVetoException {
      int oldTimeZoneOffset = this.timeZoneOffset;
      vetoableChangeSupport.fireVetoableChange("timeZoneOffset", new Integer(oldTimeZoneOffset), new Integer(timeZoneOffset));
      this.timeZoneOffset = timeZoneOffset;
      propertyChangeSupport.firePropertyChange("timeZoneOffset", new Integer(oldTimeZoneOffset), new Integer(timeZoneOffset));
    }
    
    /** Getter for property usingTimeZoneID.
     * @return Value of property usingTimeZoneID.
     */
    public boolean isUsingTimeZoneID() {
      return usingTimeZoneID;
    }
    
    /** Setter for property usingTimeZoneID.
     * @param usingTimeZoneID New value of property usingTimeZoneID.
     */
    public void setUsingTimeZoneID(boolean usingTimeZoneID) {
      boolean oldUsingTimeZoneID = this.usingTimeZoneID;
      this.usingTimeZoneID = usingTimeZoneID;
      propertyChangeSupport.firePropertyChange("usingTimeZoneID", new Boolean(oldUsingTimeZoneID), new Boolean(usingTimeZoneID));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
