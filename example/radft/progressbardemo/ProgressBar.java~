package progressbardemo;

import java.io.*;

public class ProgressBar extends javax.swing.JApplet {
  /** Creates new form ProgressBar */
  public ProgressBar() {
    initComponents();
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    private void initComponents() {//GEN-BEGIN:initComponents
          jpb = new javax.swing.JProgressBar();
          jbtCopy = new javax.swing.JButton();
          jpFiles = new javax.swing.JPanel();
          jpFromFile = new javax.swing.JPanel();
          jtfFrom = new javax.swing.JTextField();
          jpToFile = new javax.swing.JPanel();
          jtfTo = new javax.swing.JTextField();
          
          jpb.setStringPainted(true);
          getContentPane().add(jpb, java.awt.BorderLayout.NORTH);
          
          jbtCopy.setText("Copy");
          getContentPane().add(jbtCopy, java.awt.BorderLayout.SOUTH);
          
          jpFiles.setLayout(new java.awt.GridLayout(2, 0));
          
          jpFromFile.setLayout(new java.awt.BorderLayout());
          
          jpFromFile.setBorder(new javax.swing.border.TitledBorder("From"));
          jpFromFile.add(jtfFrom, java.awt.BorderLayout.CENTER);
          
          jpFiles.add(jpFromFile);
        
        jpToFile.setLayout(new java.awt.BorderLayout());
          
          jpToFile.setBorder(new javax.swing.border.TitledBorder("To"));
          jtfTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
              jtfToActionPerformed(evt);
            }
          });
          
          jpToFile.add(jtfTo, java.awt.BorderLayout.CENTER);
          
          jpFiles.add(jpToFile);
        
        getContentPane().add(jpFiles, java.awt.BorderLayout.CENTER);
      
    }//GEN-END:initComponents
    
    private void jtfToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfToActionPerformed
      // Create a thread for copying files
      CopyFileThread thread = new CopyFileThread(this);
      thread.start();
    }//GEN-LAST:event_jtfToActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar jpb;
    private javax.swing.JButton jbtCopy;
    private javax.swing.JPanel jpFiles;
    private javax.swing.JPanel jpFromFile;
    private javax.swing.JTextField jtfFrom;
    private javax.swing.JPanel jpToFile;
    private javax.swing.JTextField jtfTo;
    // End of variables declaration//GEN-END:variables
    
    // Copy file and update progress bar in a separate thread
    class CopyFileThread extends Thread {
      int currentValue;
      Runnable updateProgressBar;
      ProgressBar applet;
      
      public CopyFileThread(final ProgressBar applet) {
        this.applet = applet;
        
        updateProgressBar = new Runnable() {
          public void run() {
            javax.swing.JProgressBar jpb = applet.jpb;
            jpb.setValue(currentValue);
          }
        };
      }
      
      public void run() {
        java.io.BufferedInputStream in = null;
        java.io.BufferedOutputStream out = null;
        try  {
          // Create file input stream
          java.io.File inFile = new java.io.File(applet.jtfFrom.getText().trim());
          in = new BufferedInputStream(new FileInputStream(inFile));
          
          // Create file output stream
          java.io.File outFile = new File(applet.jtfTo.getText());
          out =  new BufferedOutputStream(new FileOutputStream(outFile));
          
          // Get total bytes in the file
          long totalBytes = in.available();
          
          // Start progress meter bar
          applet.jpb.setValue(0);
          applet.jpb.setMaximum(100);
          
          int r;
          long bytesRead = 0;
          byte[] b = new byte[512];
          while ((r = in.read(b, 0, b.length)) != -1) {
            out.write(b, 0, r);
            bytesRead += r;
            currentValue = (int)(bytesRead*100/totalBytes);
            
            // Update the progress bar
            javax.swing.SwingUtilities.invokeLater(updateProgressBar);
          }
        }
        catch (FileNotFoundException ex) {
          ex.printStackTrace();
        }
        catch (IOException ex) {
          ex.printStackTrace();
        }
        finally {
          try {
            if (in != null) in.close();
            if (out != null) out.close();
          }
          catch (Exception ex) {}
        }
      }
    }
}