package dynamicsettingdemo;

import java.awt.*;
import java.awt.event.*;
import java.applet.*;
import javax.swing.*;
import javax.swing.border.*;
import java.net.URL;

public class Exercise5_5 extends JApplet
{
  // Create button group
  ButtonGroup btg1 = new ButtonGroup();
  ButtonGroup btg2 = new ButtonGroup();

  // Create image icons for buttons
  ImageIcon btIcon; // Regular icon
  ImageIcon btpIcon; // Pressed icon
  ImageIcon btrIcon; // Rollover icon

  // Create image icons for the toggle button
  ImageIcon tbIcon; // Regular icon
  ImageIcon tbrIcon;  // Rollover icon
  ImageIcon tbrsIcon; // Rollover selected icon
  ImageIcon tbsIcon;  // Selected icon, same as pressed

  // Create image icons for radio buttons
  ImageIcon rbIcon;  // Regular icon
  ImageIcon rbpIcon; // Pressed icon
  ImageIcon rbrIcon; // Rollover icon
  ImageIcon rbsIcon; // Selected icon
  ImageIcon rbrsIcon; // Rollover selected icon

  // Generated by JBuilder
  boolean isStandalone = false;
  JPanel jpButtons = new JPanel();
  JPanel jpSettings = new JPanel();
  JPanel jpAlignment = new JPanel();
  GridLayout gridLayout1 = new GridLayout();
  JButton jbt = new JButton();
  JToggleButton jtb = new JToggleButton();
  JCheckBox jchk = new JCheckBox();
  JRadioButton jrb = new JRadioButton();
  TitledBorder titledBorder1;
  TitledBorder titledBorder3;
  JPanel jpMiscSettings = new JPanel();
  JCheckBox jchkBorderPainted = new JCheckBox();
  JCheckBox jchkContentAreaFilled = new JCheckBox();
  JCheckBox jchkEnabled = new JCheckBox();
  JCheckBox jchkFocusPainted = new JCheckBox();
  JCheckBox jchkOpaque = new JCheckBox();
  JCheckBox jchkRolloverEnabled = new JCheckBox();
  GridLayout gridLayout4 = new GridLayout();
  JRadioButton jrbLeft = new JRadioButton();
  JRadioButton jrbRight = new JRadioButton();
  JRadioButton jrbCenter = new JRadioButton();
  GridLayout gridLayout3 = new GridLayout();
  GridLayout gridLayout2 = new GridLayout();
  JPanel jpHorizontalAlignment = new JPanel();
  JPanel jpVerticalAlignment = new JPanel();
  GridLayout gridLayout5 = new GridLayout();
  BorderLayout borderLayout1 = new BorderLayout();
  JRadioButton jrbTop = new JRadioButton();
  JRadioButton jrbVCenter = new JRadioButton();
  JRadioButton jrbBottom = new JRadioButton();
  TitledBorder titledBorder2;
  GridLayout gridLayout6 = new GridLayout();
  Border border1;

  /**Construct the applet*/
  public Exercise5_5()
  {
  }

  /**Initialize the applet*/
  public void init()
  {
    try
    {
      jbInit();
    }
    catch(Exception e)
    {
      e.printStackTrace();
    }
  }

  /**Component initialization*/
  private void jbInit() throws Exception
  {
    // Load icon images using URLs
    Toolkit toolkit = Toolkit.getDefaultToolkit();
    URL url = this.getClass().getResource("/image/b.gif");
    btIcon = new ImageIcon(toolkit.getImage(url));

    url = this.getClass().getResource("/image/bp.gif");
    btpIcon = new ImageIcon(toolkit.getImage(url));

    url = this.getClass().getResource("/image/br.gif");
    btrIcon = new ImageIcon(toolkit.getImage(url));

    url = this.getClass().getResource("/image/tb.gif");
    tbIcon = new ImageIcon(toolkit.getImage(url));

    url = this.getClass().getResource("/image/tbr.gif");
    tbrIcon = new ImageIcon(toolkit.getImage(url));

    url = this.getClass().getResource("/image/tbs.gif");
    tbsIcon = new ImageIcon(toolkit.getImage(url));

    url = this.getClass().getResource("/image/tbrs.gif");
    tbrsIcon = new ImageIcon(toolkit.getImage(url));

    url = this.getClass().getResource("/image/rb.gif");
    rbIcon = new ImageIcon(toolkit.getImage(url));

    url = this.getClass().getResource("/image/rbp.gif");
    rbpIcon = new ImageIcon(toolkit.getImage(url));

    url = this.getClass().getResource("/image/rbr.gif");
    rbrIcon = new ImageIcon(toolkit.getImage(url));

    url = this.getClass().getResource("/image/rbs.gif");
    rbsIcon = new ImageIcon(toolkit.getImage(url));

    url = this.getClass().getResource("/image/rbrs.gif");
    rbrsIcon = new ImageIcon(toolkit.getImage(url));

    //  Generated by JBuilder
    titledBorder1 = new TitledBorder("");
    titledBorder3 = new TitledBorder("");
    titledBorder2 = new TitledBorder("");
    border1 = BorderFactory.createMatteBorder(2,2,2,2,Color.red);
    this.setSize(new Dimension(400,300));
    this.getContentPane().setLayout(borderLayout1);
    jpButtons.setLayout(gridLayout1);
    jbt.setBorder(border1);
    jbt.setToolTipText("This is a JButton");
    jbt.setIcon(btIcon);
    jbt.setPressedIcon(btpIcon);
    jbt.setRolloverIcon(btrIcon);
    jbt.setText("Button");
    jtb.setIcon(tbIcon);
    jtb.setBorder(border1);
    jtb.setToolTipText("This is a JToggleButton");
    jtb.setRolloverIcon(tbrIcon);
    jtb.setRolloverSelectedIcon(tbrsIcon);
    jtb.setSelectedIcon(tbsIcon);
    jtb.setPressedIcon(tbsIcon);
    jtb.setText("Toggle Button");
    jchk.setToolTipText("This is a JCheckBox");
    jchk.setRolloverIcon(btrIcon);
    jchk.setBorderPainted(true);
    jchk.setBorder(border1);
    jchk.setPressedIcon(btpIcon);
    jchk.setText("Check Box");
    jrb.setToolTipText("This is a radio button");
    jrb.setRolloverIcon(btrIcon);
    jrb.setBorderPainted(true);
    jrb.setBorder(border1);
    jrb.setPressedIcon(btpIcon);
    jrb.setText("Radio Button");
    gridLayout1.setRows(2);
    titledBorder1.setTitle("Horizontal Alignment");
    jpAlignment.setLayout(gridLayout3);
    jpMiscSettings.setBorder(titledBorder3);
    jpMiscSettings.setLayout(gridLayout4);
    titledBorder3.setTitle("Miscellanoues Options");
    jchkBorderPainted.setText("Border Painted");
    jchkBorderPainted.addActionListener(
      new java.awt.event.ActionListener()
    {
      public void actionPerformed(ActionEvent e)
      {
        jchkBorderPainted_actionPerformed(e);
      }
    });
    jchkContentAreaFilled.setText("Content Area Filled");
    jchkContentAreaFilled.addActionListener(
      new java.awt.event.ActionListener()
    {
      public void actionPerformed(ActionEvent e)
      {
        jchkContentAreaFilled_actionPerformed(e);
      }
    });
    jchkEnabled.setText("Enabled");
    jchkEnabled.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(ActionEvent e)
      {
        jchkEnabled_actionPerformed(e);
      }
    });
    jchkFocusPainted.setText("Focus Painted");
    jchkFocusPainted.addActionListener(
      new java.awt.event.ActionListener()
    {
      public void actionPerformed(ActionEvent e)
      {
        jchkFocusPainted_actionPerformed(e);
      }
    });
    jchkOpaque.setText("Opaque");
    jchkOpaque.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(ActionEvent e)
      {
        jchkOpaque_actionPerformed(e);
      }
    });
    jchkRolloverEnabled.setText("Rollover Enabled");
    jchkRolloverEnabled.addActionListener(
      new java.awt.event.ActionListener()
    {
      public void actionPerformed(ActionEvent e)
      {
        jchkRolloverEnabled_actionPerformed(e);
      }
    });
    gridLayout4.setRows(6);
    jrbLeft.setIcon(rbIcon);
    jrbLeft.setRolloverIcon(rbrIcon);
    jrbLeft.setRolloverSelectedIcon(rbrsIcon);
    jrbLeft.setSelectedIcon(rbsIcon);
    jrbLeft.setText("LEFT");
    jrbLeft.setPressedIcon(rbpIcon);
    jrbLeft.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(ActionEvent e)
      {
        jrbLeft_actionPerformed(e);
      }
    });
    jrbRight.setIcon(rbIcon);
    jrbRight.setRolloverIcon(rbrIcon);
    jrbRight.setRolloverSelectedIcon(rbrsIcon);
    jrbRight.setSelectedIcon(rbsIcon);
    jrbRight.setText("RIGHT");
    jrbRight.setPressedIcon(rbpIcon);
    jrbRight.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(ActionEvent e)
      {
        jrbRight_actionPerformed(e);
      }
    });
    jrbCenter.setIcon(rbIcon);
    jrbCenter.setRolloverIcon(rbrIcon);
    jrbCenter.setRolloverSelectedIcon(rbrsIcon);
    jrbCenter.setSelectedIcon(rbsIcon);
    jrbCenter.setText("CENTER");
    jrbCenter.setPressedIcon(rbpIcon);
    jrbCenter.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(ActionEvent e)
      {
        jrbCenter_actionPerformed(e);
      }
    });
    gridLayout3.setRows(2);
    jpHorizontalAlignment.setLayout(gridLayout5);
    gridLayout5.setRows(3);
    jpHorizontalAlignment.setBorder(titledBorder1);
    jrbTop.setIcon(rbIcon);
    jrbTop.setRolloverIcon(rbrIcon);
    jrbTop.setRolloverSelectedIcon(rbrsIcon);
    jrbTop.setSelectedIcon(rbsIcon);
    jrbTop.setText("TOP");
    jrbTop.setPressedIcon(rbpIcon);
    jrbTop.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(ActionEvent e)
      {
        jrbTop_actionPerformed(e);
      }
    });
    jrbVCenter.setIcon(rbIcon);
    jrbVCenter.setRolloverIcon(rbrIcon);
    jrbVCenter.setRolloverSelectedIcon(rbrsIcon);
    jrbVCenter.setSelectedIcon(rbsIcon);
    jrbVCenter.setSelected(true);
    jrbVCenter.setText("CENTER");
    jrbVCenter.setPressedIcon(rbpIcon);
    jrbVCenter.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(ActionEvent e)
      {
        jrbVCenter_actionPerformed(e);
      }
    });
    jrbBottom.setIcon(rbIcon);
    jrbBottom.setRolloverIcon(rbrIcon);
    jrbBottom.setRolloverSelectedIcon(rbsIcon);
    jrbBottom.setSelectedIcon(rbsIcon);
    jrbBottom.setText("BOTTOM");
    jrbBottom.setPressedIcon(rbpIcon);
    jrbBottom.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(ActionEvent e)
      {
        jrbBottom_actionPerformed(e);
      }
    });
    jpVerticalAlignment.setBorder(titledBorder2);
    jpVerticalAlignment.setLayout(gridLayout6);
    gridLayout6.setRows(3);
    titledBorder2.setTitle("Vertical Alignment");
    jpButtons.setBorder(border1);
    this.getContentPane().add(jpButtons, BorderLayout.CENTER);
    jpButtons.add(jbt, null);
    jpButtons.add(jchk, null);
    jpButtons.add(jtb, null);
    jpButtons.add(jrb, null);
    this.getContentPane().add(jpSettings, BorderLayout.SOUTH);
    jpSettings.setLayout(gridLayout2);
    jpSettings.add(jpAlignment, null);
    jpAlignment.add(jpHorizontalAlignment, null);
    jpHorizontalAlignment.add(jrbLeft, null);
    jpHorizontalAlignment.add(jrbCenter, null);
    jpHorizontalAlignment.add(jrbRight, null);
    jpAlignment.add(jpVerticalAlignment, null);
    jpVerticalAlignment.add(jrbTop, null);
    jpVerticalAlignment.add(jrbVCenter, null);
    jpVerticalAlignment.add(jrbBottom, null);
    jpSettings.add(jpMiscSettings, null);
    jpMiscSettings.add(jchkBorderPainted, null);
    jpMiscSettings.add(jchkContentAreaFilled, null);
    jpMiscSettings.add(jchkEnabled, null);
    jpMiscSettings.add(jchkFocusPainted, null);
    jpMiscSettings.add(jchkOpaque, null);
    jpMiscSettings.add(jchkRolloverEnabled, null);

    // Group radio buttons for setting horizontal alignment
    btg1.add(jrbLeft);
    btg1.add(jrbCenter);
    btg1.add(jrbRight);

    // Group radio buttons for setting horizontal alignment
    btg2.add(jrbTop);
    btg2.add(jrbVCenter);
    btg2.add(jrbBottom);
  }

  /**Handle check box borderPainted*/
  void jchkBorderPainted_actionPerformed(ActionEvent e)
  {
    jbt.setBorderPainted(jchkBorderPainted.isSelected());
    jtb.setBorderPainted(jchkBorderPainted.isSelected());
    jchk.setBorderPainted(jchkBorderPainted.isSelected());
    jrb.setBorderPainted(jchkBorderPainted.isSelected());
  }

  /**Handle check box contentAreaFilled*/
  void jchkContentAreaFilled_actionPerformed(ActionEvent e)
  {
    jbt.setContentAreaFilled(jchkContentAreaFilled.isSelected());
    jtb.setContentAreaFilled(jchkContentAreaFilled.isSelected());
    jchk.setContentAreaFilled(jchkContentAreaFilled.isSelected());
    jrb.setContentAreaFilled(jchkContentAreaFilled.isSelected());
  }

  /**Handle check box enabled*/
  void jchkEnabled_actionPerformed(ActionEvent e)
  {
    jbt.setEnabled(jchkEnabled.isSelected());
    jtb.setEnabled(jchkEnabled.isSelected());
    jchk.setEnabled(jchkEnabled.isSelected());
    jrb.setEnabled(jchkEnabled.isSelected());
  }

  /**Handle check box focusPainted*/
  void jchkFocusPainted_actionPerformed(ActionEvent e)
  {
    jbt.setFocusPainted(jchkFocusPainted.isSelected());
    jtb.setFocusPainted(jchkFocusPainted.isSelected());
    jchk.setFocusPainted(jchkFocusPainted.isSelected());
    jrb.setFocusPainted(jchkFocusPainted.isSelected());
  }

  /**Handle check box opaque*/
  void jchkOpaque_actionPerformed(ActionEvent e)
  {
    jbt.setOpaque(jchkOpaque.isSelected());
    jtb.setOpaque(jchkOpaque.isSelected());
    jchk.setOpaque(jchkOpaque.isSelected());
    jrb.setOpaque(jchkOpaque.isSelected());
  }

  /**Handle check box rolloverEnabled*/
  void jchkRolloverEnabled_actionPerformed(ActionEvent e)
  {
    jbt.setRolloverEnabled(jchkRolloverEnabled.isSelected());
    jtb.setRolloverEnabled(jchkRolloverEnabled.isSelected());
    jchk.setRolloverEnabled(jchkRolloverEnabled.isSelected());
    jrb.setRolloverEnabled(jchkRolloverEnabled.isSelected());
  }

  /**Handle the radio button to set left horizontal alignment*/
  void jrbLeft_actionPerformed(ActionEvent e)
  {
    if (jrbLeft.isSelected())
      setHorizontalAlignment(SwingConstants.LEFT);
  }

  /**Handle the radio button to set center horizontal alignment*/
  void jrbCenter_actionPerformed(ActionEvent e)
  {
    if (jrbCenter.isSelected())
      setHorizontalAlignment(SwingConstants.CENTER);
  }

  /**Handle the radio button to set right horizontal alignment*/
  void jrbRight_actionPerformed(ActionEvent e)
  {
    if (jrbRight.isSelected())
      setHorizontalAlignment(SwingConstants.RIGHT);
   }

  /**Handle the radio button to set top vertical alignment*/
  void jrbTop_actionPerformed(ActionEvent e)
  {
    if (jrbTop.isSelected())
      setVerticalAlignment(SwingConstants.TOP);
  }

  /**Handle the radio button to set center vertical alignment*/
  void jrbVCenter_actionPerformed(ActionEvent e)
  {
    if (jrbVCenter.isSelected())
      setVerticalAlignment(SwingConstants.CENTER);
  }

  /**Handle the radio button to set bottom vertical alignment*/
  void jrbBottom_actionPerformed(ActionEvent e)
  {
    if (jrbBottom.isSelected())
      setVerticalAlignment(SwingConstants.BOTTOM);
  }

  /**Set horizontal alignment*/
  private void setHorizontalAlignment(int alignment)
  {
    jbt.setHorizontalAlignment(alignment);
    jtb.setHorizontalAlignment(alignment);
    jchk.setHorizontalAlignment(alignment);
    jrb.setHorizontalAlignment(alignment);
  }

  /**Set vertical alignment*/
  private void setVerticalAlignment(int alignment)
  {
    jbt.setVerticalAlignment(alignment);
    jtb.setVerticalAlignment(alignment);
    jchk.setVerticalAlignment(alignment);
    jrb.setVerticalAlignment(alignment);
  }

  /**Get Applet information*/
  public String getAppletInfo()
  {
    return "Applet Information";
  }
  /**Get parameter info*/
  public String[][] getParameterInfo()
  {
    return null;
  }
  /**Main method*/
  public static void main(String[] args)
  {
    Exercise5_5 applet = new Exercise5_5();
    applet.isStandalone = true;
    JFrame frame = new JFrame();
    //EXIT_ON_CLOSE == 3
    frame.setDefaultCloseOperation(3);
    frame.setTitle("Exercise 5.5");
    frame.getContentPane().add(applet, BorderLayout.CENTER);
    applet.init();
    applet.start();
    frame.setSize(400,320);
    Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
    frame.setLocation((d.width - frame.getSize().width) / 2, (d.height - frame.getSize().height) / 2);
    frame.setVisible(true);
  }

  //static initializer for setting look & feel
  static
  {
    try
    {
      //UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
      //UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
    }
    catch(Exception e)
    {
    }
  }
}